/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BadgeManager","desc":"","methods":[{"name":"createApplication","args":[{"name":"maintainerAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createBadge","args":[{"name":"appId","type":"uint64"},{"name":"badgeName","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteBadge","args":[{"name":"appId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"maintainerAddress":{"key":"bWFpbnRhaW5lckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"totalBadges":{"key":"dG90YWxCb3VudGllcw==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"allBadges":{"keyType":"uint64","valueType":"string"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/BadgeManager.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts/BadgeManager.algo.ts:6","pc":[1,2,3]},{"teal":3,"source":"contracts/BadgeManager.algo.ts:6","pc":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]},{"teal":15,"source":"contracts/BadgeManager.algo.ts:6","pc":[24,25]},{"teal":16,"source":"contracts/BadgeManager.algo.ts:6","pc":[26]},{"teal":17,"source":"contracts/BadgeManager.algo.ts:6","pc":[27,28]},{"teal":18,"source":"contracts/BadgeManager.algo.ts:6","pc":[29]},{"teal":19,"source":"contracts/BadgeManager.algo.ts:6","pc":[30,31]},{"teal":20,"source":"contracts/BadgeManager.algo.ts:6","pc":[32]},{"teal":21,"source":"contracts/BadgeManager.algo.ts:6","pc":[33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]},{"teal":25,"source":"contracts/BadgeManager.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[59]},{"teal":30,"source":"contracts/BadgeManager.algo.ts:14","pc":[60,61,62]},{"teal":31,"source":"contracts/BadgeManager.algo.ts:14","pc":[63]},{"teal":32,"source":"contracts/BadgeManager.algo.ts:14","pc":[64]},{"teal":33,"source":"contracts/BadgeManager.algo.ts:14","pc":[65,66]},{"teal":34,"source":"contracts/BadgeManager.algo.ts:14","pc":[67]},{"teal":37,"source":"contracts/BadgeManager.algo.ts:14","errorMessage":"argument 0 (maintainerAddress) for createApplication must be a address","pc":[68]},{"teal":40,"source":"contracts/BadgeManager.algo.ts:14","pc":[69,70,71]},{"teal":41,"source":"contracts/BadgeManager.algo.ts:14","pc":[72]},{"teal":42,"source":"contracts/BadgeManager.algo.ts:14","pc":[73]},{"teal":46,"source":"contracts/BadgeManager.algo.ts:14","pc":[74,75,76]},{"teal":50,"source":"contracts/BadgeManager.algo.ts:15","pc":[77]},{"teal":51,"source":"contracts/BadgeManager.algo.ts:15","pc":[78,79]},{"teal":52,"source":"contracts/BadgeManager.algo.ts:15","pc":[80]},{"teal":53,"source":"contracts/BadgeManager.algo.ts:14","pc":[81]},{"teal":58,"source":"contracts/BadgeManager.algo.ts:18","pc":[82,83,84]},{"teal":59,"source":"contracts/BadgeManager.algo.ts:18","pc":[85,86,87]},{"teal":62,"source":"contracts/BadgeManager.algo.ts:18","pc":[88,89,90]},{"teal":63,"source":"contracts/BadgeManager.algo.ts:18","pc":[91]},{"teal":66,"source":"contracts/BadgeManager.algo.ts:18","pc":[92,93,94]},{"teal":67,"source":"contracts/BadgeManager.algo.ts:18","pc":[95]},{"teal":68,"source":"contracts/BadgeManager.algo.ts:18","pc":[96]},{"teal":72,"source":"contracts/BadgeManager.algo.ts:18","pc":[97,98,99]},{"teal":76,"source":"contracts/BadgeManager.algo.ts:19","pc":[100,101]},{"teal":77,"source":"contracts/BadgeManager.algo.ts:19","pc":[102]},{"teal":78,"source":"contracts/BadgeManager.algo.ts:19","pc":[103]},{"teal":79,"source":"contracts/BadgeManager.algo.ts:19","pc":[104]},{"teal":80,"source":"contracts/BadgeManager.algo.ts:19","pc":[105]},{"teal":84,"source":"contracts/BadgeManager.algo.ts:21","pc":[106,107]},{"teal":85,"source":"contracts/BadgeManager.algo.ts:21","pc":[108]},{"teal":86,"source":"contracts/BadgeManager.algo.ts:21","pc":[109]},{"teal":87,"source":"contracts/BadgeManager.algo.ts:21","pc":[110]},{"teal":88,"source":"contracts/BadgeManager.algo.ts:21","pc":[111]},{"teal":89,"source":"contracts/BadgeManager.algo.ts:21","pc":[112,113]},{"teal":90,"source":"contracts/BadgeManager.algo.ts:21","pc":[114]},{"teal":91,"source":"contracts/BadgeManager.algo.ts:21","pc":[115]},{"teal":92,"source":"contracts/BadgeManager.algo.ts:21","pc":[116]},{"teal":93,"source":"contracts/BadgeManager.algo.ts:21","pc":[117,118,119]},{"teal":94,"source":"contracts/BadgeManager.algo.ts:21","pc":[120]},{"teal":95,"source":"contracts/BadgeManager.algo.ts:21","pc":[121]},{"teal":96,"source":"contracts/BadgeManager.algo.ts:21","pc":[122]},{"teal":97,"source":"contracts/BadgeManager.algo.ts:18","pc":[123]},{"teal":102,"source":"contracts/BadgeManager.algo.ts:27","pc":[124,125,126]},{"teal":103,"source":"contracts/BadgeManager.algo.ts:27","pc":[127]},{"teal":106,"source":"contracts/BadgeManager.algo.ts:27","pc":[128,129,130]},{"teal":107,"source":"contracts/BadgeManager.algo.ts:27","pc":[131]},{"teal":108,"source":"contracts/BadgeManager.algo.ts:27","pc":[132]},{"teal":112,"source":"contracts/BadgeManager.algo.ts:27","pc":[133,134,135]},{"teal":116,"source":"contracts/BadgeManager.algo.ts:29","pc":[136,137]},{"teal":117,"source":"contracts/BadgeManager.algo.ts:29","pc":[138,139,140]},{"teal":118,"source":"contracts/BadgeManager.algo.ts:29","pc":[141,142]},{"teal":119,"source":"contracts/BadgeManager.algo.ts:29","pc":[143]},{"teal":120,"source":"contracts/BadgeManager.algo.ts:29","pc":[144]},{"teal":121,"source":"contracts/BadgeManager.algo.ts:29","pc":[145]},{"teal":125,"source":"contracts/BadgeManager.algo.ts:32","pc":[146,147]},{"teal":126,"source":"contracts/BadgeManager.algo.ts:32","pc":[148]},{"teal":127,"source":"contracts/BadgeManager.algo.ts:32","pc":[149]},{"teal":128,"source":"contracts/BadgeManager.algo.ts:27","pc":[150]},{"teal":131,"source":"contracts/BadgeManager.algo.ts:6","pc":[151,152,153,154,155,156]},{"teal":132,"source":"contracts/BadgeManager.algo.ts:6","pc":[157,158,159]},{"teal":133,"source":"contracts/BadgeManager.algo.ts:6","pc":[160,161,162,163]},{"teal":136,"source":"contracts/BadgeManager.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[164]},{"teal":139,"source":"contracts/BadgeManager.algo.ts:6","pc":[165,166,167,168,169,170]},{"teal":140,"source":"contracts/BadgeManager.algo.ts:6","pc":[171,172,173,174,175,176]},{"teal":141,"source":"contracts/BadgeManager.algo.ts:6","pc":[177,178,179]},{"teal":142,"source":"contracts/BadgeManager.algo.ts:6","pc":[180,181,182,183,184,185]},{"teal":145,"source":"contracts/BadgeManager.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[186]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHg2ZDYxNjk2ZTc0NjE2OTZlNjU3MjQxNjQ2NDcyNjU3MzczCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBtYWludGFpbmVyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAobWFpbnRhaW5lckFkZHJlc3MpIGZvciBjcmVhdGVBcHBsaWNhdGlvbiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKG1haW50YWluZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9CYWRnZU1hbmFnZXIuYWxnby50czoxNQoJLy8gdGhpcy5tYWludGFpbmVyQWRkcmVzcy52YWx1ZSA9IG1haW50YWluZXJBZGRyZXNzCglieXRlYyAwIC8vICAibWFpbnRhaW5lckFkZHJlc3MiCglmcmFtZV9kaWcgLTEgLy8gbWFpbnRhaW5lckFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNyZWF0ZUJhZGdlKHVpbnQ2NCxzdHJpbmcpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUJhZGdlOgoJLy8gYmFkZ2VOYW1lOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gYXBwSWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY3JlYXRlQmFkZ2UodWludDY0LHN0cmluZyl2b2lkCgljYWxsc3ViIGNyZWF0ZUJhZGdlCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVCYWRnZShhcHBJZDogdWludDY0LCBiYWRnZU5hbWU6IHN0cmluZyk6IHZvaWQKY3JlYXRlQmFkZ2U6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvQmFkZ2VNYW5hZ2VyLmFsZ28udHM6MTkKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT10aGlzLm1haW50YWluZXJBZGRyZXNzLnZhbHVlICAgKQoJdHhuIFNlbmRlcgoJYnl0ZWMgMCAvLyAgIm1haW50YWluZXJBZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQmFkZ2VNYW5hZ2VyLmFsZ28udHM6MjEKCS8vIHRoaXMuYWxsQmFkZ2VzKGFwcElkKS52YWx1ZSA9IGJhZGdlTmFtZQoJZnJhbWVfZGlnIC0xIC8vIGFwcElkOiB1aW50NjQKCWl0b2IKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTIgLy8gYmFkZ2VOYW1lOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIGRlbGV0ZUJhZGdlKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfZGVsZXRlQmFkZ2U6CgkvLyBhcHBJZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBkZWxldGVCYWRnZSh1aW50NjQpdm9pZAoJY2FsbHN1YiBkZWxldGVCYWRnZQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGVsZXRlQmFkZ2UoYXBwSWQ6IHVpbnQ2NCk6IHZvaWQKZGVsZXRlQmFkZ2U6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvQmFkZ2VNYW5hZ2VyLmFsZ28udHM6MjkKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT0gdGhpcy5hcHAuY3JlYXRvcikKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9CYWRnZU1hbmFnZXIuYWxnby50czozMgoJLy8gdGhpcy5hbGxCYWRnZXMoYXBwSWQpLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTEgLy8gYXBwSWQ6IHVpbnQ2NAoJaXRvYgoJYm94X2RlbAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhkMzI0YmVhNCAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweDQxYjM4N2Q4IC8vIG1ldGhvZCAiY3JlYXRlQmFkZ2UodWludDY0LHN0cmluZyl2b2lkIgoJcHVzaGJ5dGVzIDB4ZTA1Njg2MjQgLy8gbWV0aG9kICJkZWxldGVCYWRnZSh1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQmFkZ2UgKmFiaV9yb3V0ZV9kZWxldGVCYWRnZQoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiABASYBEW1haW50YWluZXJBZGRyZXNzMRgUgQYLMRkIjQwAagAAAAAAAAAAAAAAXAAAAAAAAAAAAAAANhoBSRWBIBJEiAACIkOKAQAoi/9niTYaAlcCADYaAReIAAIiQ4oCADEAKGQSRIv/Fkm8SIv+SRUWVwYCTFC/iTYaAReIAAIiQ4oBADEANjIAcgdIEkSL/xa8iYAE0yS+pDYaAI4B/5gAgARBs4fYgATgVoYkNhoAjgL/mP/CAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":3,"commitHash":"f3be4a3b"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BadgeManager contract
 */
export type BadgeManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      maintainerAddress: string
    }
    'createBadge(uint64,string)void': {
      appId: bigint | number
      badgeName: string
    }
    'deleteBadge(uint64)void': {
      appId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [maintainerAddress: string]
    'createBadge(uint64,string)void': [appId: bigint | number, badgeName: string]
    'deleteBadge(uint64)void': [appId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BadgeManagerReturns = {
  'createApplication(address)void': void
  'createBadge(uint64,string)void': void
  'deleteBadge(uint64)void': void
}

/**
 * Defines the types of available calls and state of the BadgeManager smart contract.
 */
export type BadgeManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: BadgeManagerArgs['obj']['createApplication(address)void']
      argsTuple: BadgeManagerArgs['tuple']['createApplication(address)void']
      returns: BadgeManagerReturns['createApplication(address)void']
    }>
    & Record<'createBadge(uint64,string)void' | 'createBadge', {
      argsObj: BadgeManagerArgs['obj']['createBadge(uint64,string)void']
      argsTuple: BadgeManagerArgs['tuple']['createBadge(uint64,string)void']
      returns: BadgeManagerReturns['createBadge(uint64,string)void']
    }>
    & Record<'deleteBadge(uint64)void' | 'deleteBadge', {
      argsObj: BadgeManagerArgs['obj']['deleteBadge(uint64)void']
      argsTuple: BadgeManagerArgs['tuple']['deleteBadge(uint64)void']
      returns: BadgeManagerReturns['deleteBadge(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        maintainerAddress: string
        totalBadges: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        allBadges: Map<bigint | number, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BadgeManagerSignatures = keyof BadgeManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BadgeManagerNonVoidMethodSignatures = keyof BadgeManagerTypes['methods'] extends infer T ? T extends keyof BadgeManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BadgeManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BadgeManagerSignatures> = BadgeManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BadgeManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BadgeManagerSignatures> = BadgeManagerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BadgeManagerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BadgeManagerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BadgeManagerCreateCallParams =
  | Expand<CallParams<BadgeManagerArgs['obj']['createApplication(address)void'] | BadgeManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BadgeManagerArgs['obj']['createApplication(address)void'] | BadgeManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BadgeManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BadgeManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BadgeManager smart contract
 */
export abstract class BadgeManagerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BadgeManagerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return BadgeManagerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BadgeManager smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BadgeManagerArgs['obj']['createApplication(address)void'] | BadgeManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.maintainerAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createBadge(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBadge(params: CallParams<BadgeManagerArgs['obj']['createBadge(uint64,string)void'] | BadgeManagerArgs['tuple']['createBadge(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBadge(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId, params.args.badgeName],
    }
  }
  /**
   * Constructs a no op call for the deleteBadge(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBadge(params: CallParams<BadgeManagerArgs['obj']['deleteBadge(uint64)void'] | BadgeManagerArgs['tuple']['deleteBadge(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteBadge(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BadgeManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BadgeManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BadgeManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BadgeManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BadgeManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BadgeManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BadgeManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BadgeManagerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BadgeManagerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BadgeManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BadgeManagerArgs['obj']['createApplication(address)void'] | BadgeManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(BadgeManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BadgeManagerArgs['obj']['createApplication(address)void'] | BadgeManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(BadgeManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeManager smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BadgeManagerArgs['obj']['createApplication(address)void'] | BadgeManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(BadgeManagerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BadgeManagerReturns['createApplication(address)void']) }, appClient: new BadgeManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BadgeManager smart contract
 */
export class BadgeManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BadgeManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BadgeManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BadgeManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BadgeManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BadgeManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BadgeManagerClient> {
    return new BadgeManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BadgeManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BadgeManagerClient> {
    return new BadgeManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeManager smart contract using the `createBadge(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBadge: (params: CallParams<BadgeManagerArgs['obj']['createBadge(uint64,string)void'] | BadgeManagerArgs['tuple']['createBadge(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeManagerParamsFactory.createBadge(params))
    },

    /**
     * Makes a call to the BadgeManager smart contract using the `deleteBadge(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBadge: (params: CallParams<BadgeManagerArgs['obj']['deleteBadge(uint64)void'] | BadgeManagerArgs['tuple']['deleteBadge(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeManagerParamsFactory.deleteBadge(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeManager smart contract using the `createBadge(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBadge: (params: CallParams<BadgeManagerArgs['obj']['createBadge(uint64,string)void'] | BadgeManagerArgs['tuple']['createBadge(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeManagerParamsFactory.createBadge(params))
    },

    /**
     * Makes a call to the BadgeManager smart contract using the `deleteBadge(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBadge: (params: CallParams<BadgeManagerArgs['obj']['deleteBadge(uint64)void'] | BadgeManagerArgs['tuple']['deleteBadge(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeManagerParamsFactory.deleteBadge(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeManager smart contract using the `createBadge(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBadge: async (params: CallParams<BadgeManagerArgs['obj']['createBadge(uint64,string)void'] | BadgeManagerArgs['tuple']['createBadge(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeManagerParamsFactory.createBadge(params))
      return {...result, return: result.return as unknown as (undefined | BadgeManagerReturns['createBadge(uint64,string)void'])}
    },

    /**
     * Makes a call to the BadgeManager smart contract using the `deleteBadge(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBadge: async (params: CallParams<BadgeManagerArgs['obj']['deleteBadge(uint64)void'] | BadgeManagerArgs['tuple']['deleteBadge(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeManagerParamsFactory.deleteBadge(params))
      return {...result, return: result.return as unknown as (undefined | BadgeManagerReturns['deleteBadge(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BadgeManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BadgeManager app
   */
  state = {
    /**
     * Methods to access global state for the current BadgeManager app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          maintainerAddress: result.maintainerAddress,
          totalBadges: result.totalBadges,
        }
      },
      /**
       * Get the current value of the maintainerAddress key in global state
       */
      maintainerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maintainerAddress")) as string | undefined },
      /**
       * Get the current value of the totalBadges key in global state
       */
      totalBadges: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalBadges")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current BadgeManager app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the allBadges map in box state
       */
      allBadges: {
        /**
         * Get all current values of the allBadges map in box state
         */
        getMap: async (): Promise<Map<bigint, string>> => { return (await this.appClient.state.box.getMap("allBadges")) as Map<bigint, string> },
        /**
         * Get a current value of the allBadges map by key from box state
         */
        value: async (key: bigint | number): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("allBadges", key) as string | undefined },
      },
    },
  }

  public newGroup(): BadgeManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createBadge(uint64,string)void method call against the BadgeManager contract
       */
      createBadge(params: CallParams<BadgeManagerArgs['obj']['createBadge(uint64,string)void'] | BadgeManagerArgs['tuple']['createBadge(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteBadge(uint64)void method call against the BadgeManager contract
       */
      deleteBadge(params: CallParams<BadgeManagerArgs['obj']['deleteBadge(uint64)void'] | BadgeManagerArgs['tuple']['deleteBadge(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BadgeManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BadgeManagerComposer
  }
}
export type BadgeManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createBadge(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBadge(params?: CallParams<BadgeManagerArgs['obj']['createBadge(uint64,string)void'] | BadgeManagerArgs['tuple']['createBadge(uint64,string)void']>): BadgeManagerComposer<[...TReturns, BadgeManagerReturns['createBadge(uint64,string)void'] | undefined]>

  /**
   * Calls the deleteBadge(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBadge(params?: CallParams<BadgeManagerArgs['obj']['deleteBadge(uint64)void'] | BadgeManagerArgs['tuple']['deleteBadge(uint64)void']>): BadgeManagerComposer<[...TReturns, BadgeManagerReturns['deleteBadge(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BadgeManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BadgeManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BadgeManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BadgeManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BadgeManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BadgeManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BadgeManagerComposerResults<TReturns>>
}
export type BadgeManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

