/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BadgeContract","desc":"","methods":[{"name":"createApplication","args":[{"name":"creatorAddress","type":"address"},{"name":"tokenName","type":"string"},{"name":"total","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createBadge","args":[{"name":"assetUrl","type":"string"},{"name":"totalTickets","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerBadge","args":[{"name":"email","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":2,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"assetName":{"key":"YXNzZXROYW1l","keyType":"AVMBytes","valueType":"string"},"assetID":{"key":"YXNzZXRJRA==","keyType":"AVMBytes","valueType":"uint64"},"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"amountRemaining":{"key":"YW1vdW50UmVtYWluaW5n","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"registeredMap":{"keyType":"address","valueType":"string"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/BadgeContract.algo.ts:5","pc":[0]},{"teal":2,"source":"contracts/BadgeContract.algo.ts:5","pc":[1,2,3,4]},{"teal":3,"source":"contracts/BadgeContract.algo.ts:5","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]},{"teal":15,"source":"contracts/BadgeContract.algo.ts:5","pc":[57,58]},{"teal":16,"source":"contracts/BadgeContract.algo.ts:5","pc":[59]},{"teal":17,"source":"contracts/BadgeContract.algo.ts:5","pc":[60,61]},{"teal":18,"source":"contracts/BadgeContract.algo.ts:5","pc":[62]},{"teal":19,"source":"contracts/BadgeContract.algo.ts:5","pc":[63,64]},{"teal":20,"source":"contracts/BadgeContract.algo.ts:5","pc":[65]},{"teal":21,"source":"contracts/BadgeContract.algo.ts:5","pc":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]},{"teal":25,"source":"contracts/BadgeContract.algo.ts:5","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[92]},{"teal":30,"source":"contracts/BadgeContract.algo.ts:14","pc":[93,94,95]},{"teal":31,"source":"contracts/BadgeContract.algo.ts:14","pc":[96]},{"teal":34,"source":"contracts/BadgeContract.algo.ts:14","pc":[97,98,99]},{"teal":35,"source":"contracts/BadgeContract.algo.ts:14","pc":[100,101,102]},{"teal":38,"source":"contracts/BadgeContract.algo.ts:14","pc":[103,104,105]},{"teal":39,"source":"contracts/BadgeContract.algo.ts:14","pc":[106]},{"teal":40,"source":"contracts/BadgeContract.algo.ts:14","pc":[107]},{"teal":41,"source":"contracts/BadgeContract.algo.ts:14","pc":[108,109]},{"teal":42,"source":"contracts/BadgeContract.algo.ts:14","pc":[110]},{"teal":45,"source":"contracts/BadgeContract.algo.ts:14","errorMessage":"argument 2 (creatorAddress) for createApplication must be a address","pc":[111]},{"teal":48,"source":"contracts/BadgeContract.algo.ts:14","pc":[112,113,114]},{"teal":49,"source":"contracts/BadgeContract.algo.ts:14","pc":[115]},{"teal":50,"source":"contracts/BadgeContract.algo.ts:14","pc":[116]},{"teal":54,"source":"contracts/BadgeContract.algo.ts:14","pc":[117,118,119]},{"teal":58,"source":"contracts/BadgeContract.algo.ts:19","pc":[120]},{"teal":59,"source":"contracts/BadgeContract.algo.ts:19","pc":[121,122]},{"teal":60,"source":"contracts/BadgeContract.algo.ts:19","pc":[123]},{"teal":64,"source":"contracts/BadgeContract.algo.ts:20","pc":[124]},{"teal":65,"source":"contracts/BadgeContract.algo.ts:20","pc":[125,126]},{"teal":66,"source":"contracts/BadgeContract.algo.ts:20","pc":[127]},{"teal":67,"source":"contracts/BadgeContract.algo.ts:20","pc":[128]},{"teal":68,"source":"contracts/BadgeContract.algo.ts:20","pc":[129]},{"teal":69,"source":"contracts/BadgeContract.algo.ts:20","pc":[130,131,132]},{"teal":70,"source":"contracts/BadgeContract.algo.ts:20","pc":[133]},{"teal":71,"source":"contracts/BadgeContract.algo.ts:20","pc":[134]},{"teal":72,"source":"contracts/BadgeContract.algo.ts:20","pc":[135]},{"teal":76,"source":"contracts/BadgeContract.algo.ts:21","pc":[136]},{"teal":77,"source":"contracts/BadgeContract.algo.ts:21","pc":[137,138]},{"teal":78,"source":"contracts/BadgeContract.algo.ts:21","pc":[139]},{"teal":79,"source":"contracts/BadgeContract.algo.ts:14","pc":[140]},{"teal":84,"source":"contracts/BadgeContract.algo.ts:25","pc":[141,142,143]},{"teal":85,"source":"contracts/BadgeContract.algo.ts:25","pc":[144]},{"teal":88,"source":"contracts/BadgeContract.algo.ts:25","pc":[145,146,147]},{"teal":89,"source":"contracts/BadgeContract.algo.ts:25","pc":[148,149,150]},{"teal":92,"source":"contracts/BadgeContract.algo.ts:25","pc":[151,152,153]},{"teal":93,"source":"contracts/BadgeContract.algo.ts:25","pc":[154]},{"teal":94,"source":"contracts/BadgeContract.algo.ts:25","pc":[155]},{"teal":98,"source":"contracts/BadgeContract.algo.ts:25","pc":[156,157,158]},{"teal":101,"source":"contracts/BadgeContract.algo.ts:25","pc":[159,160]},{"teal":105,"source":"contracts/BadgeContract.algo.ts:27","pc":[161,162]},{"teal":106,"source":"contracts/BadgeContract.algo.ts:27","pc":[163,164,165]},{"teal":107,"source":"contracts/BadgeContract.algo.ts:27","pc":[166,167]},{"teal":108,"source":"contracts/BadgeContract.algo.ts:27","pc":[168]},{"teal":109,"source":"contracts/BadgeContract.algo.ts:27","pc":[169]},{"teal":112,"source":"contracts/BadgeContract.algo.ts:27","errorMessage":"Only The Event Creator can Mint Badges","pc":[170]},{"teal":129,"source":"contracts/BadgeContract.algo.ts:30","pc":[171]},{"teal":130,"source":"contracts/BadgeContract.algo.ts:30","pc":[172,173]},{"teal":131,"source":"contracts/BadgeContract.algo.ts:30","pc":[174,175]},{"teal":135,"source":"contracts/BadgeContract.algo.ts:31","pc":[176,177]},{"teal":136,"source":"contracts/BadgeContract.algo.ts:31","pc":[178,179]},{"teal":140,"source":"contracts/BadgeContract.algo.ts:32","pc":[180]},{"teal":141,"source":"contracts/BadgeContract.algo.ts:32","pc":[181,182]},{"teal":145,"source":"contracts/BadgeContract.algo.ts:33","pc":[183,184,185,186,187,188,189]},{"teal":146,"source":"contracts/BadgeContract.algo.ts:33","pc":[190,191]},{"teal":150,"source":"contracts/BadgeContract.algo.ts:34","pc":[192]},{"teal":151,"source":"contracts/BadgeContract.algo.ts:34","pc":[193]},{"teal":152,"source":"contracts/BadgeContract.algo.ts:34","pc":[194,195,196]},{"teal":153,"source":"contracts/BadgeContract.algo.ts:34","pc":[197,198]},{"teal":157,"source":"contracts/BadgeContract.algo.ts:35","pc":[199,200]},{"teal":158,"source":"contracts/BadgeContract.algo.ts:35","pc":[201,202]},{"teal":162,"source":"contracts/BadgeContract.algo.ts:36","pc":[203,204]},{"teal":163,"source":"contracts/BadgeContract.algo.ts:36","pc":[205,206]},{"teal":167,"source":"contracts/BadgeContract.algo.ts:37","pc":[207]},{"teal":168,"source":"contracts/BadgeContract.algo.ts:37","pc":[208]},{"teal":169,"source":"contracts/BadgeContract.algo.ts:37","pc":[209,210]},{"teal":173,"source":"contracts/BadgeContract.algo.ts:38","pc":[211,212]},{"teal":174,"source":"contracts/BadgeContract.algo.ts:38","pc":[213,214]},{"teal":178,"source":"contracts/BadgeContract.algo.ts:39","pc":[215,216,217]},{"teal":179,"source":"contracts/BadgeContract.algo.ts:39","pc":[218,219]},{"teal":182,"source":"contracts/BadgeContract.algo.ts:30","pc":[220]},{"teal":183,"source":"contracts/BadgeContract.algo.ts:30","pc":[221,222]},{"teal":184,"source":"contracts/BadgeContract.algo.ts:30","pc":[223,224]},{"teal":188,"source":"contracts/BadgeContract.algo.ts:45","pc":[225]},{"teal":189,"source":"contracts/BadgeContract.algo.ts:45","pc":[226,227]},{"teal":190,"source":"contracts/BadgeContract.algo.ts:45","pc":[228]},{"teal":191,"source":"contracts/BadgeContract.algo.ts:25","pc":[229]},{"teal":196,"source":"contracts/BadgeContract.algo.ts:50","pc":[230,231,232]},{"teal":197,"source":"contracts/BadgeContract.algo.ts:50","pc":[233,234,235]},{"teal":200,"source":"contracts/BadgeContract.algo.ts:50","pc":[236,237,238]},{"teal":201,"source":"contracts/BadgeContract.algo.ts:50","pc":[239]},{"teal":202,"source":"contracts/BadgeContract.algo.ts:50","pc":[240]},{"teal":206,"source":"contracts/BadgeContract.algo.ts:50","pc":[241,242,243]},{"teal":210,"source":"contracts/BadgeContract.algo.ts:53","pc":[244,245]},{"teal":211,"source":"contracts/BadgeContract.algo.ts:53","pc":[246]},{"teal":212,"source":"contracts/BadgeContract.algo.ts:53","pc":[247]},{"teal":213,"source":"contracts/BadgeContract.algo.ts:53","pc":[248]},{"teal":214,"source":"contracts/BadgeContract.algo.ts:53","pc":[249]},{"teal":217,"source":"contracts/BadgeContract.algo.ts:53","errorMessage":"already claimed","pc":[250]},{"teal":221,"source":"contracts/BadgeContract.algo.ts:54","pc":[251,252]},{"teal":222,"source":"contracts/BadgeContract.algo.ts:54","pc":[253]},{"teal":223,"source":"contracts/BadgeContract.algo.ts:54","pc":[254]},{"teal":224,"source":"contracts/BadgeContract.algo.ts:54","pc":[255]},{"teal":225,"source":"contracts/BadgeContract.algo.ts:54","pc":[256,257]},{"teal":226,"source":"contracts/BadgeContract.algo.ts:54","pc":[258]},{"teal":227,"source":"contracts/BadgeContract.algo.ts:54","pc":[259]},{"teal":228,"source":"contracts/BadgeContract.algo.ts:54","pc":[260]},{"teal":229,"source":"contracts/BadgeContract.algo.ts:54","pc":[261,262,263]},{"teal":230,"source":"contracts/BadgeContract.algo.ts:54","pc":[264]},{"teal":231,"source":"contracts/BadgeContract.algo.ts:54","pc":[265]},{"teal":232,"source":"contracts/BadgeContract.algo.ts:54","pc":[266]},{"teal":236,"source":"contracts/BadgeContract.algo.ts:59","pc":[267,268]},{"teal":237,"source":"contracts/BadgeContract.algo.ts:59","pc":[269,270,271]},{"teal":238,"source":"contracts/BadgeContract.algo.ts:50","pc":[272]},{"teal":250,"source":"contracts/BadgeContract.algo.ts:70","pc":[273,274,275]},{"teal":253,"source":"contracts/BadgeContract.algo.ts:70","pc":[276,277]},{"teal":261,"source":"contracts/BadgeContract.algo.ts:71","pc":[278]},{"teal":262,"source":"contracts/BadgeContract.algo.ts:71","pc":[279,280]},{"teal":263,"source":"contracts/BadgeContract.algo.ts:71","pc":[281,282]},{"teal":267,"source":"contracts/BadgeContract.algo.ts:72","pc":[283]},{"teal":268,"source":"contracts/BadgeContract.algo.ts:72","pc":[284]},{"teal":269,"source":"contracts/BadgeContract.algo.ts:72","pc":[285,286]},{"teal":273,"source":"contracts/BadgeContract.algo.ts:73","pc":[287,288]},{"teal":274,"source":"contracts/BadgeContract.algo.ts:73","pc":[289,290]},{"teal":278,"source":"contracts/BadgeContract.algo.ts:74","pc":[291]},{"teal":279,"source":"contracts/BadgeContract.algo.ts:74","pc":[292,293]},{"teal":282,"source":"contracts/BadgeContract.algo.ts:71","pc":[294]},{"teal":283,"source":"contracts/BadgeContract.algo.ts:71","pc":[295,296]},{"teal":286,"source":"contracts/BadgeContract.algo.ts:71","pc":[297]},{"teal":290,"source":"contracts/BadgeContract.algo.ts:78","pc":[298]},{"teal":291,"source":"contracts/BadgeContract.algo.ts:78","pc":[299]},{"teal":292,"source":"contracts/BadgeContract.algo.ts:78","pc":[300]},{"teal":293,"source":"contracts/BadgeContract.algo.ts:78","pc":[301]},{"teal":294,"source":"contracts/BadgeContract.algo.ts:78","pc":[302,303]},{"teal":298,"source":"contracts/BadgeContract.algo.ts:80","pc":[304,305]},{"teal":301,"source":"contracts/BadgeContract.algo.ts:70","pc":[306,307]},{"teal":302,"source":"contracts/BadgeContract.algo.ts:70","pc":[308]},{"teal":305,"source":"contracts/BadgeContract.algo.ts:5","pc":[309,310,311,312,313,314]},{"teal":306,"source":"contracts/BadgeContract.algo.ts:5","pc":[315,316,317]},{"teal":307,"source":"contracts/BadgeContract.algo.ts:5","pc":[318,319,320,321]},{"teal":310,"source":"contracts/BadgeContract.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[322]},{"teal":313,"source":"contracts/BadgeContract.algo.ts:5","pc":[323,324,325,326,327,328]},{"teal":314,"source":"contracts/BadgeContract.algo.ts:5","pc":[329,330,331,332,333,334]},{"teal":315,"source":"contracts/BadgeContract.algo.ts:5","pc":[335,336,337]},{"teal":316,"source":"contracts/BadgeContract.algo.ts:5","pc":[338,339,340,341,342,343]},{"teal":319,"source":"contracts/BadgeContract.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[344]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQAmBQ9hbW91bnRSZW1haW5pbmcOY3JlYXRvckFkZHJlc3MJYXNzZXROYW1lB2Fzc2V0SUQAMRgUgQYLMRkIjQwA5wAAAAAAAAAAAAAA2QAAAAAAAAAAAAAANhoDFzYaAlcCADYaAUkVgSASRIgAAiJDigMAKYv/ZyqL/kkVFlcGAkxQZyiL/WeJNhoCFzYaAVcCAIgAAiJDigIAJwQxADYyAHIHSBJEsYEDshCL/rIiI7IjgAVCQURHRbIlKmRXAgCyJov/sicyCrIsKWSyKTIKsiqBuBeyAbO0PIwAK4sAZ4k2GgFXAgCIAAIiQ4oBADEAvUxIFEQxAEm8SIv/SRUWVwYCTFC/MQCIAAGJigEBJwSxgQSyECtkshGL/7IUIrISI7IBsyhkIgmMAIsAjACJgAQMWC4BNhoAjgH/GwCABLu+m5mABEkfyqc2GgCOAv81/44A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":3,"commitHash":"f3be4a3b"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the BadgeContract contract
 */
export type BadgeContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,string,uint64)void': {
      creatorAddress: string
      tokenName: string
      total: bigint | number
    }
    'createBadge(string,uint64)void': {
      assetUrl: string
      totalTickets: bigint | number
    }
    'registerBadge(string)void': {
      email: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,string,uint64)void': [creatorAddress: string, tokenName: string, total: bigint | number]
    'createBadge(string,uint64)void': [assetUrl: string, totalTickets: bigint | number]
    'registerBadge(string)void': [email: string]
  }
}

/**
 * The return type for each method
 */
export type BadgeContractReturns = {
  'createApplication(address,string,uint64)void': void
  'createBadge(string,uint64)void': void
  'registerBadge(string)void': void
}

/**
 * Defines the types of available calls and state of the BadgeContract smart contract.
 */
export type BadgeContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,string,uint64)void' | 'createApplication', {
      argsObj: BadgeContractArgs['obj']['createApplication(address,string,uint64)void']
      argsTuple: BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']
      returns: BadgeContractReturns['createApplication(address,string,uint64)void']
    }>
    & Record<'createBadge(string,uint64)void' | 'createBadge', {
      argsObj: BadgeContractArgs['obj']['createBadge(string,uint64)void']
      argsTuple: BadgeContractArgs['tuple']['createBadge(string,uint64)void']
      returns: BadgeContractReturns['createBadge(string,uint64)void']
    }>
    & Record<'registerBadge(string)void' | 'registerBadge', {
      argsObj: BadgeContractArgs['obj']['registerBadge(string)void']
      argsTuple: BadgeContractArgs['tuple']['registerBadge(string)void']
      returns: BadgeContractReturns['registerBadge(string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetName: string
        assetId: bigint
        creatorAddress: string
        amountRemaining: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        registeredMap: Map<string, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BadgeContractSignatures = keyof BadgeContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BadgeContractNonVoidMethodSignatures = keyof BadgeContractTypes['methods'] extends infer T ? T extends keyof BadgeContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BadgeContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BadgeContractSignatures> = BadgeContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BadgeContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BadgeContractSignatures> = BadgeContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BadgeContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BadgeContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BadgeContractCreateCallParams =
  | Expand<CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & {method: 'createApplication(address,string,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BadgeContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BadgeContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BadgeContract smart contract
 */
export abstract class BadgeContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BadgeContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,string,uint64)void':
            return BadgeContractParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BadgeContract smart contract using the createApplication(address,string,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,string,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creatorAddress, params.args.tokenName, params.args.total],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createBadge(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBadge(params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBadge(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetUrl, params.args.totalTickets],
    }
  }
  /**
   * Constructs a no op call for the registerBadge(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerBadge(params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerBadge(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.email],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BadgeContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BadgeContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BadgeContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BadgeContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BadgeContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BadgeContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BadgeContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BadgeContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BadgeContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BadgeContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeContract smart contract using the createApplication(address,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(BadgeContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeContract smart contract using the createApplication(address,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(BadgeContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeContract smart contract using an ABI method call using the createApplication(address,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(BadgeContractParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BadgeContractReturns['createApplication(address,string,uint64)void']) }, appClient: new BadgeContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BadgeContract smart contract
 */
export class BadgeContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BadgeContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BadgeContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BadgeContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BadgeContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BadgeContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BadgeContractClient> {
    return new BadgeContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BadgeContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BadgeContractClient> {
    return new BadgeContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `createBadge(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBadge: (params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeContractParamsFactory.createBadge(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `registerBadge(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerBadge: (params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeContractParamsFactory.registerBadge(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `createBadge(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBadge: (params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeContractParamsFactory.createBadge(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `registerBadge(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerBadge: (params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeContractParamsFactory.registerBadge(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `createBadge(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBadge: async (params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeContractParamsFactory.createBadge(params))
      return {...result, return: result.return as unknown as (undefined | BadgeContractReturns['createBadge(string,uint64)void'])}
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `registerBadge(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerBadge: async (params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeContractParamsFactory.registerBadge(params))
      return {...result, return: result.return as unknown as (undefined | BadgeContractReturns['registerBadge(string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BadgeContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BadgeContract app
   */
  state = {
    /**
     * Methods to access global state for the current BadgeContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetName: result.assetName,
          assetId: result.assetID,
          creatorAddress: result.creatorAddress,
          amountRemaining: result.amountRemaining,
        }
      },
      /**
       * Get the current value of the assetName key in global state
       */
      assetName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("assetName")) as string | undefined },
      /**
       * Get the current value of the assetID key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetID")) as bigint | undefined },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the amountRemaining key in global state
       */
      amountRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amountRemaining")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current BadgeContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the registeredMap map in box state
       */
      registeredMap: {
        /**
         * Get all current values of the registeredMap map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("registeredMap")) as Map<string, string> },
        /**
         * Get a current value of the registeredMap map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("registeredMap", key) as string | undefined },
      },
    },
  }

  public newGroup(): BadgeContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createBadge(string,uint64)void method call against the BadgeContract contract
       */
      createBadge(params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerBadge(string)void method call against the BadgeContract contract
       */
      registerBadge(params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BadgeContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BadgeContractComposer
  }
}
export type BadgeContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createBadge(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBadge(params?: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']>): BadgeContractComposer<[...TReturns, BadgeContractReturns['createBadge(string,uint64)void'] | undefined]>

  /**
   * Calls the registerBadge(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerBadge(params?: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']>): BadgeContractComposer<[...TReturns, BadgeContractReturns['registerBadge(string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BadgeContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BadgeContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BadgeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BadgeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BadgeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BadgeContractComposerResults<TReturns>>
}
export type BadgeContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

