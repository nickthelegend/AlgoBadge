/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"BadgeContract","desc":"","methods":[{"name":"createApplication","args":[{"name":"creatorAddress","type":"address"},{"name":"tokenName","type":"string"},{"name":"total","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createBadge","args":[{"name":"assetUrl","type":"string"},{"name":"totalTickets","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"registerBadge","args":[{"name":"email","type":"string"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"approve","args":[{"name":"user","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"assignAppID","args":[{"name":"appID","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"UserDetails":[{"name":"approved","type":"string"},{"name":"desc","type":"string"},{"name":"multiSignAppId","type":"uint64"}]},"state":{"schema":{"global":{"bytes":2,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"assetName":{"key":"YXNzZXROYW1l","keyType":"AVMBytes","valueType":"string"},"assetID":{"key":"YXNzZXRJRA==","keyType":"AVMBytes","valueType":"uint64"},"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"amountRemaining":{"key":"YW1vdW50UmVtYWluaW5n","keyType":"AVMBytes","valueType":"uint64"},"multiSignAppID":{"key":"bXVsdGlTaWduQXBwSUQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"registeredMap":{"keyType":"address","valueType":"UserDetails"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/BadgeContract.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/BadgeContract.algo.ts:10","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/BadgeContract.algo.ts:10","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]},{"teal":15,"source":"contracts/BadgeContract.algo.ts:10","pc":[79,80]},{"teal":16,"source":"contracts/BadgeContract.algo.ts:10","pc":[81]},{"teal":17,"source":"contracts/BadgeContract.algo.ts:10","pc":[82,83]},{"teal":18,"source":"contracts/BadgeContract.algo.ts:10","pc":[84]},{"teal":19,"source":"contracts/BadgeContract.algo.ts:10","pc":[85,86]},{"teal":20,"source":"contracts/BadgeContract.algo.ts:10","pc":[87]},{"teal":21,"source":"contracts/BadgeContract.algo.ts:10","pc":[88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113]},{"teal":25,"source":"contracts/BadgeContract.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[114]},{"teal":30,"source":"contracts/BadgeContract.algo.ts:20","pc":[115,116,117]},{"teal":31,"source":"contracts/BadgeContract.algo.ts:20","pc":[118]},{"teal":34,"source":"contracts/BadgeContract.algo.ts:20","pc":[119,120,121]},{"teal":35,"source":"contracts/BadgeContract.algo.ts:20","pc":[122,123,124]},{"teal":38,"source":"contracts/BadgeContract.algo.ts:20","pc":[125,126,127]},{"teal":39,"source":"contracts/BadgeContract.algo.ts:20","pc":[128]},{"teal":40,"source":"contracts/BadgeContract.algo.ts:20","pc":[129]},{"teal":41,"source":"contracts/BadgeContract.algo.ts:20","pc":[130]},{"teal":42,"source":"contracts/BadgeContract.algo.ts:20","pc":[131]},{"teal":45,"source":"contracts/BadgeContract.algo.ts:20","errorMessage":"argument 2 (creatorAddress) for createApplication must be a address","pc":[132]},{"teal":48,"source":"contracts/BadgeContract.algo.ts:20","pc":[133,134,135]},{"teal":49,"source":"contracts/BadgeContract.algo.ts:20","pc":[136]},{"teal":50,"source":"contracts/BadgeContract.algo.ts:20","pc":[137]},{"teal":54,"source":"contracts/BadgeContract.algo.ts:20","pc":[138,139,140]},{"teal":58,"source":"contracts/BadgeContract.algo.ts:25","pc":[141,142]},{"teal":59,"source":"contracts/BadgeContract.algo.ts:25","pc":[143,144]},{"teal":60,"source":"contracts/BadgeContract.algo.ts:25","pc":[145]},{"teal":64,"source":"contracts/BadgeContract.algo.ts:26","pc":[146,147]},{"teal":65,"source":"contracts/BadgeContract.algo.ts:26","pc":[148,149]},{"teal":66,"source":"contracts/BadgeContract.algo.ts:26","pc":[150]},{"teal":67,"source":"contracts/BadgeContract.algo.ts:26","pc":[151]},{"teal":68,"source":"contracts/BadgeContract.algo.ts:26","pc":[152]},{"teal":69,"source":"contracts/BadgeContract.algo.ts:26","pc":[153,154,155]},{"teal":70,"source":"contracts/BadgeContract.algo.ts:26","pc":[156]},{"teal":71,"source":"contracts/BadgeContract.algo.ts:26","pc":[157]},{"teal":72,"source":"contracts/BadgeContract.algo.ts:26","pc":[158]},{"teal":76,"source":"contracts/BadgeContract.algo.ts:27","pc":[159]},{"teal":77,"source":"contracts/BadgeContract.algo.ts:27","pc":[160,161]},{"teal":78,"source":"contracts/BadgeContract.algo.ts:27","pc":[162]},{"teal":79,"source":"contracts/BadgeContract.algo.ts:20","pc":[163]},{"teal":84,"source":"contracts/BadgeContract.algo.ts:30","pc":[164,165,166]},{"teal":85,"source":"contracts/BadgeContract.algo.ts:30","pc":[167]},{"teal":88,"source":"contracts/BadgeContract.algo.ts:30","pc":[168,169,170]},{"teal":89,"source":"contracts/BadgeContract.algo.ts:30","pc":[171,172,173]},{"teal":92,"source":"contracts/BadgeContract.algo.ts:30","pc":[174,175,176]},{"teal":93,"source":"contracts/BadgeContract.algo.ts:30","pc":[177]},{"teal":94,"source":"contracts/BadgeContract.algo.ts:30","pc":[178]},{"teal":98,"source":"contracts/BadgeContract.algo.ts:30","pc":[179,180,181]},{"teal":101,"source":"contracts/BadgeContract.algo.ts:30","pc":[182]},{"teal":105,"source":"contracts/BadgeContract.algo.ts:32","pc":[183,184]},{"teal":106,"source":"contracts/BadgeContract.algo.ts:32","pc":[185,186,187]},{"teal":107,"source":"contracts/BadgeContract.algo.ts:32","pc":[188,189]},{"teal":108,"source":"contracts/BadgeContract.algo.ts:32","pc":[190]},{"teal":109,"source":"contracts/BadgeContract.algo.ts:32","pc":[191]},{"teal":112,"source":"contracts/BadgeContract.algo.ts:32","errorMessage":"Only The Event Creator can Mint Badges","pc":[192]},{"teal":129,"source":"contracts/BadgeContract.algo.ts:35","pc":[193]},{"teal":130,"source":"contracts/BadgeContract.algo.ts:35","pc":[194,195]},{"teal":131,"source":"contracts/BadgeContract.algo.ts:35","pc":[196,197]},{"teal":135,"source":"contracts/BadgeContract.algo.ts:36","pc":[198,199]},{"teal":136,"source":"contracts/BadgeContract.algo.ts:36","pc":[200,201]},{"teal":140,"source":"contracts/BadgeContract.algo.ts:37","pc":[202]},{"teal":141,"source":"contracts/BadgeContract.algo.ts:37","pc":[203,204]},{"teal":145,"source":"contracts/BadgeContract.algo.ts:38","pc":[205,206,207,208,209,210,211]},{"teal":146,"source":"contracts/BadgeContract.algo.ts:38","pc":[212,213]},{"teal":150,"source":"contracts/BadgeContract.algo.ts:39","pc":[214,215]},{"teal":151,"source":"contracts/BadgeContract.algo.ts:39","pc":[216]},{"teal":152,"source":"contracts/BadgeContract.algo.ts:39","pc":[217,218,219]},{"teal":153,"source":"contracts/BadgeContract.algo.ts:39","pc":[220,221]},{"teal":157,"source":"contracts/BadgeContract.algo.ts:40","pc":[222,223]},{"teal":158,"source":"contracts/BadgeContract.algo.ts:40","pc":[224,225]},{"teal":162,"source":"contracts/BadgeContract.algo.ts:41","pc":[226,227]},{"teal":163,"source":"contracts/BadgeContract.algo.ts:41","pc":[228,229]},{"teal":167,"source":"contracts/BadgeContract.algo.ts:42","pc":[230,231]},{"teal":168,"source":"contracts/BadgeContract.algo.ts:42","pc":[232]},{"teal":169,"source":"contracts/BadgeContract.algo.ts:42","pc":[233,234]},{"teal":173,"source":"contracts/BadgeContract.algo.ts:43","pc":[235,236]},{"teal":174,"source":"contracts/BadgeContract.algo.ts:43","pc":[237,238]},{"teal":178,"source":"contracts/BadgeContract.algo.ts:44","pc":[239,240,241]},{"teal":179,"source":"contracts/BadgeContract.algo.ts:44","pc":[242,243]},{"teal":182,"source":"contracts/BadgeContract.algo.ts:35","pc":[244]},{"teal":183,"source":"contracts/BadgeContract.algo.ts:35","pc":[245,246]},{"teal":184,"source":"contracts/BadgeContract.algo.ts:35","pc":[247,248]},{"teal":188,"source":"contracts/BadgeContract.algo.ts:50","pc":[249,250]},{"teal":189,"source":"contracts/BadgeContract.algo.ts:50","pc":[251,252]},{"teal":190,"source":"contracts/BadgeContract.algo.ts:50","pc":[253]},{"teal":191,"source":"contracts/BadgeContract.algo.ts:30","pc":[254]},{"teal":196,"source":"contracts/BadgeContract.algo.ts:55","pc":[255,256,257]},{"teal":197,"source":"contracts/BadgeContract.algo.ts:55","pc":[258,259,260]},{"teal":200,"source":"contracts/BadgeContract.algo.ts:55","pc":[261,262,263]},{"teal":201,"source":"contracts/BadgeContract.algo.ts:55","pc":[264]},{"teal":202,"source":"contracts/BadgeContract.algo.ts:55","pc":[265]},{"teal":206,"source":"contracts/BadgeContract.algo.ts:55","pc":[266,267,268]},{"teal":209,"source":"contracts/BadgeContract.algo.ts:55","pc":[269]},{"teal":219,"source":"contracts/BadgeContract.algo.ts:57","pc":[270]},{"teal":220,"source":"contracts/BadgeContract.algo.ts:57","pc":[271]},{"teal":221,"source":"contracts/BadgeContract.algo.ts:57","pc":[272]},{"teal":222,"source":"contracts/BadgeContract.algo.ts:58","pc":[273]},{"teal":223,"source":"contracts/BadgeContract.algo.ts:58","pc":[274,275,276]},{"teal":224,"source":"contracts/BadgeContract.algo.ts:59","pc":[277,278]},{"teal":225,"source":"contracts/BadgeContract.algo.ts:59","pc":[279]},{"teal":226,"source":"contracts/BadgeContract.algo.ts:59","pc":[280]},{"teal":227,"source":"contracts/BadgeContract.algo.ts:59","pc":[281]},{"teal":228,"source":"contracts/BadgeContract.algo.ts:59","pc":[282,283,284]},{"teal":229,"source":"contracts/BadgeContract.algo.ts:59","pc":[285]},{"teal":230,"source":"contracts/BadgeContract.algo.ts:59","pc":[286]},{"teal":231,"source":"contracts/BadgeContract.algo.ts:59","pc":[287,288,289]},{"teal":232,"source":"contracts/BadgeContract.algo.ts:60","pc":[290,291]},{"teal":233,"source":"contracts/BadgeContract.algo.ts:60","pc":[292,293,294]},{"teal":234,"source":"contracts/BadgeContract.algo.ts:57","pc":[295]},{"teal":235,"source":"contracts/BadgeContract.algo.ts:57","pc":[296]},{"teal":236,"source":"contracts/BadgeContract.algo.ts:57","pc":[297,298]},{"teal":240,"source":"contracts/BadgeContract.algo.ts:64","pc":[299,300]},{"teal":241,"source":"contracts/BadgeContract.algo.ts:64","pc":[301]},{"teal":242,"source":"contracts/BadgeContract.algo.ts:64","pc":[302]},{"teal":243,"source":"contracts/BadgeContract.algo.ts:64","pc":[303]},{"teal":244,"source":"contracts/BadgeContract.algo.ts:64","pc":[304]},{"teal":247,"source":"contracts/BadgeContract.algo.ts:64","errorMessage":"already claimed","pc":[305]},{"teal":251,"source":"contracts/BadgeContract.algo.ts:65","pc":[306,307]},{"teal":252,"source":"contracts/BadgeContract.algo.ts:65","pc":[308]},{"teal":253,"source":"contracts/BadgeContract.algo.ts:65","pc":[309]},{"teal":254,"source":"contracts/BadgeContract.algo.ts:65","pc":[310]},{"teal":255,"source":"contracts/BadgeContract.algo.ts:65","pc":[311,312]},{"teal":256,"source":"contracts/BadgeContract.algo.ts:65","pc":[313]},{"teal":257,"source":"contracts/BadgeContract.algo.ts:55","pc":[314]},{"teal":262,"source":"contracts/BadgeContract.algo.ts:73","pc":[315,316,317]},{"teal":263,"source":"contracts/BadgeContract.algo.ts:73","pc":[318]},{"teal":264,"source":"contracts/BadgeContract.algo.ts:73","pc":[319]},{"teal":265,"source":"contracts/BadgeContract.algo.ts:73","pc":[320]},{"teal":266,"source":"contracts/BadgeContract.algo.ts:73","pc":[321]},{"teal":269,"source":"contracts/BadgeContract.algo.ts:73","errorMessage":"argument 0 (user) for approve must be a address","pc":[322]},{"teal":272,"source":"contracts/BadgeContract.algo.ts:73","pc":[323,324,325]},{"teal":273,"source":"contracts/BadgeContract.algo.ts:73","pc":[326]},{"teal":274,"source":"contracts/BadgeContract.algo.ts:73","pc":[327]},{"teal":278,"source":"contracts/BadgeContract.algo.ts:73","pc":[328,329,330]},{"teal":281,"source":"contracts/BadgeContract.algo.ts:73","pc":[331]},{"teal":291,"source":"contracts/BadgeContract.algo.ts:75","pc":[332]},{"teal":292,"source":"contracts/BadgeContract.algo.ts:75","pc":[333]},{"teal":293,"source":"contracts/BadgeContract.algo.ts:75","pc":[334]},{"teal":294,"source":"contracts/BadgeContract.algo.ts:76","pc":[335]},{"teal":295,"source":"contracts/BadgeContract.algo.ts:76","pc":[336,337,338]},{"teal":296,"source":"contracts/BadgeContract.algo.ts:77","pc":[339,340]},{"teal":297,"source":"contracts/BadgeContract.algo.ts:77","pc":[341]},{"teal":300,"source":"contracts/BadgeContract.algo.ts:77","errorMessage":"box value does not exist: this.registeredMap(this.txn.sender).value","pc":[342]},{"teal":301,"source":"contracts/BadgeContract.algo.ts:77","pc":[343,344]},{"teal":302,"source":"contracts/BadgeContract.algo.ts:77","pc":[345]},{"teal":303,"source":"contracts/BadgeContract.algo.ts:77","pc":[346,347]},{"teal":304,"source":"contracts/BadgeContract.algo.ts:77","pc":[348,349]},{"teal":305,"source":"contracts/BadgeContract.algo.ts:77","pc":[350,351]},{"teal":306,"source":"contracts/BadgeContract.algo.ts:77","pc":[352]},{"teal":307,"source":"contracts/BadgeContract.algo.ts:77","pc":[353]},{"teal":308,"source":"contracts/BadgeContract.algo.ts:77","pc":[354,355]},{"teal":309,"source":"contracts/BadgeContract.algo.ts:77","pc":[356]},{"teal":310,"source":"contracts/BadgeContract.algo.ts:77","pc":[357]},{"teal":311,"source":"contracts/BadgeContract.algo.ts:77","pc":[358]},{"teal":312,"source":"contracts/BadgeContract.algo.ts:77","pc":[359]},{"teal":313,"source":"contracts/BadgeContract.algo.ts:77","pc":[360]},{"teal":314,"source":"contracts/BadgeContract.algo.ts:77","pc":[361]},{"teal":315,"source":"contracts/BadgeContract.algo.ts:77","pc":[362]},{"teal":316,"source":"contracts/BadgeContract.algo.ts:77","pc":[363,364,365]},{"teal":317,"source":"contracts/BadgeContract.algo.ts:77","pc":[366]},{"teal":318,"source":"contracts/BadgeContract.algo.ts:77","pc":[367]},{"teal":319,"source":"contracts/BadgeContract.algo.ts:77","pc":[368]},{"teal":320,"source":"contracts/BadgeContract.algo.ts:77","pc":[369,370,371]},{"teal":321,"source":"contracts/BadgeContract.algo.ts:77","pc":[372]},{"teal":322,"source":"contracts/BadgeContract.algo.ts:77","pc":[373]},{"teal":323,"source":"contracts/BadgeContract.algo.ts:77","pc":[374,375,376]},{"teal":324,"source":"contracts/BadgeContract.algo.ts:78","pc":[377,378]},{"teal":325,"source":"contracts/BadgeContract.algo.ts:78","pc":[379,380,381]},{"teal":326,"source":"contracts/BadgeContract.algo.ts:75","pc":[382]},{"teal":327,"source":"contracts/BadgeContract.algo.ts:75","pc":[383]},{"teal":328,"source":"contracts/BadgeContract.algo.ts:75","pc":[384,385]},{"teal":332,"source":"contracts/BadgeContract.algo.ts:82","pc":[386,387]},{"teal":333,"source":"contracts/BadgeContract.algo.ts:82","pc":[388,389,390]},{"teal":337,"source":"contracts/BadgeContract.algo.ts:83","pc":[391,392]},{"teal":338,"source":"contracts/BadgeContract.algo.ts:83","pc":[393]},{"teal":339,"source":"contracts/BadgeContract.algo.ts:83","pc":[394]},{"teal":340,"source":"contracts/BadgeContract.algo.ts:83","pc":[395]},{"teal":341,"source":"contracts/BadgeContract.algo.ts:83","pc":[396,397]},{"teal":342,"source":"contracts/BadgeContract.algo.ts:83","pc":[398]},{"teal":343,"source":"contracts/BadgeContract.algo.ts:73","pc":[399]},{"teal":348,"source":"contracts/BadgeContract.algo.ts:87","pc":[400,401,402]},{"teal":349,"source":"contracts/BadgeContract.algo.ts:87","pc":[403]},{"teal":352,"source":"contracts/BadgeContract.algo.ts:87","pc":[404,405,406]},{"teal":353,"source":"contracts/BadgeContract.algo.ts:87","pc":[407]},{"teal":354,"source":"contracts/BadgeContract.algo.ts:87","pc":[408]},{"teal":358,"source":"contracts/BadgeContract.algo.ts:87","pc":[409,410,411]},{"teal":361,"source":"contracts/BadgeContract.algo.ts:87","pc":[412]},{"teal":371,"source":"contracts/BadgeContract.algo.ts:88","pc":[413]},{"teal":372,"source":"contracts/BadgeContract.algo.ts:88","pc":[414]},{"teal":373,"source":"contracts/BadgeContract.algo.ts:88","pc":[415]},{"teal":374,"source":"contracts/BadgeContract.algo.ts:89","pc":[416]},{"teal":375,"source":"contracts/BadgeContract.algo.ts:89","pc":[417,418,419]},{"teal":376,"source":"contracts/BadgeContract.algo.ts:90","pc":[420,421]},{"teal":377,"source":"contracts/BadgeContract.algo.ts:90","pc":[422]},{"teal":380,"source":"contracts/BadgeContract.algo.ts:90","errorMessage":"box value does not exist: this.registeredMap(this.txn.sender).value","pc":[423]},{"teal":381,"source":"contracts/BadgeContract.algo.ts:90","pc":[424,425]},{"teal":382,"source":"contracts/BadgeContract.algo.ts:90","pc":[426]},{"teal":383,"source":"contracts/BadgeContract.algo.ts:90","pc":[427,428]},{"teal":384,"source":"contracts/BadgeContract.algo.ts:90","pc":[429,430]},{"teal":385,"source":"contracts/BadgeContract.algo.ts:90","pc":[431,432]},{"teal":386,"source":"contracts/BadgeContract.algo.ts:90","pc":[433]},{"teal":387,"source":"contracts/BadgeContract.algo.ts:90","pc":[434]},{"teal":388,"source":"contracts/BadgeContract.algo.ts:90","pc":[435,436]},{"teal":389,"source":"contracts/BadgeContract.algo.ts:90","pc":[437]},{"teal":390,"source":"contracts/BadgeContract.algo.ts:90","pc":[438]},{"teal":391,"source":"contracts/BadgeContract.algo.ts:90","pc":[439]},{"teal":392,"source":"contracts/BadgeContract.algo.ts:90","pc":[440]},{"teal":393,"source":"contracts/BadgeContract.algo.ts:90","pc":[441]},{"teal":394,"source":"contracts/BadgeContract.algo.ts:90","pc":[442]},{"teal":395,"source":"contracts/BadgeContract.algo.ts:90","pc":[443]},{"teal":396,"source":"contracts/BadgeContract.algo.ts:90","pc":[444,445,446]},{"teal":397,"source":"contracts/BadgeContract.algo.ts:90","pc":[447]},{"teal":398,"source":"contracts/BadgeContract.algo.ts:90","pc":[448]},{"teal":399,"source":"contracts/BadgeContract.algo.ts:90","pc":[449]},{"teal":400,"source":"contracts/BadgeContract.algo.ts:90","pc":[450,451,452]},{"teal":401,"source":"contracts/BadgeContract.algo.ts:90","pc":[453]},{"teal":402,"source":"contracts/BadgeContract.algo.ts:90","pc":[454]},{"teal":403,"source":"contracts/BadgeContract.algo.ts:90","pc":[455,456,457]},{"teal":404,"source":"contracts/BadgeContract.algo.ts:91","pc":[458,459]},{"teal":405,"source":"contracts/BadgeContract.algo.ts:91","pc":[460]},{"teal":406,"source":"contracts/BadgeContract.algo.ts:91","pc":[461,462,463]},{"teal":407,"source":"contracts/BadgeContract.algo.ts:88","pc":[464]},{"teal":408,"source":"contracts/BadgeContract.algo.ts:88","pc":[465]},{"teal":409,"source":"contracts/BadgeContract.algo.ts:88","pc":[466,467]},{"teal":413,"source":"contracts/BadgeContract.algo.ts:95","pc":[468,469]},{"teal":414,"source":"contracts/BadgeContract.algo.ts:95","pc":[470]},{"teal":415,"source":"contracts/BadgeContract.algo.ts:95","pc":[471]},{"teal":416,"source":"contracts/BadgeContract.algo.ts:95","pc":[472]},{"teal":417,"source":"contracts/BadgeContract.algo.ts:95","pc":[473,474]},{"teal":418,"source":"contracts/BadgeContract.algo.ts:95","pc":[475]},{"teal":419,"source":"contracts/BadgeContract.algo.ts:87","pc":[476]},{"teal":431,"source":"contracts/BadgeContract.algo.ts:108","pc":[477,478,479]},{"teal":434,"source":"contracts/BadgeContract.algo.ts:108","pc":[480]},{"teal":442,"source":"contracts/BadgeContract.algo.ts:109","pc":[481]},{"teal":443,"source":"contracts/BadgeContract.algo.ts:109","pc":[482,483]},{"teal":444,"source":"contracts/BadgeContract.algo.ts:109","pc":[484,485]},{"teal":448,"source":"contracts/BadgeContract.algo.ts:110","pc":[486,487]},{"teal":449,"source":"contracts/BadgeContract.algo.ts:110","pc":[488]},{"teal":450,"source":"contracts/BadgeContract.algo.ts:110","pc":[489,490]},{"teal":454,"source":"contracts/BadgeContract.algo.ts:111","pc":[491,492]},{"teal":455,"source":"contracts/BadgeContract.algo.ts:111","pc":[493,494]},{"teal":459,"source":"contracts/BadgeContract.algo.ts:112","pc":[495]},{"teal":460,"source":"contracts/BadgeContract.algo.ts:112","pc":[496,497]},{"teal":463,"source":"contracts/BadgeContract.algo.ts:109","pc":[498]},{"teal":464,"source":"contracts/BadgeContract.algo.ts:109","pc":[499,500]},{"teal":467,"source":"contracts/BadgeContract.algo.ts:109","pc":[501]},{"teal":471,"source":"contracts/BadgeContract.algo.ts:116","pc":[502]},{"teal":472,"source":"contracts/BadgeContract.algo.ts:116","pc":[503]},{"teal":473,"source":"contracts/BadgeContract.algo.ts:116","pc":[504]},{"teal":474,"source":"contracts/BadgeContract.algo.ts:116","pc":[505]},{"teal":475,"source":"contracts/BadgeContract.algo.ts:116","pc":[506,507]},{"teal":479,"source":"contracts/BadgeContract.algo.ts:118","pc":[508,509]},{"teal":482,"source":"contracts/BadgeContract.algo.ts:108","pc":[510,511]},{"teal":483,"source":"contracts/BadgeContract.algo.ts:108","pc":[512]},{"teal":486,"source":"contracts/BadgeContract.algo.ts:10","pc":[513,514,515,516,517,518]},{"teal":487,"source":"contracts/BadgeContract.algo.ts:10","pc":[519,520,521]},{"teal":488,"source":"contracts/BadgeContract.algo.ts:10","pc":[522,523,524,525]},{"teal":491,"source":"contracts/BadgeContract.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[526]},{"teal":494,"source":"contracts/BadgeContract.algo.ts:10","pc":[527,528,529,530,531,532]},{"teal":495,"source":"contracts/BadgeContract.algo.ts:10","pc":[533,534,535,536,537,538]},{"teal":496,"source":"contracts/BadgeContract.algo.ts:10","pc":[539,540,541,542,543,544]},{"teal":497,"source":"contracts/BadgeContract.algo.ts:10","pc":[545,546,547,548,549,550]},{"teal":498,"source":"contracts/BadgeContract.algo.ts:10","pc":[551,552,553]},{"teal":499,"source":"contracts/BadgeContract.algo.ts:10","pc":[554,555,556,557,558,559,560,561,562,563]},{"teal":502,"source":"contracts/BadgeContract.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[564]},{"teal":505,"source":"contracts/BadgeContract.algo.ts:10","pc":[565,566,567]},{"teal":506,"source":"contracts/BadgeContract.algo.ts:10","pc":[568,569]},{"teal":507,"source":"contracts/BadgeContract.algo.ts:10","pc":[570,571]},{"teal":508,"source":"contracts/BadgeContract.algo.ts:10","pc":[572]},{"teal":509,"source":"contracts/BadgeContract.algo.ts:10","pc":[573,574]},{"teal":510,"source":"contracts/BadgeContract.algo.ts:10","pc":[575,576]},{"teal":511,"source":"contracts/BadgeContract.algo.ts:10","pc":[577]},{"teal":514,"source":"contracts/BadgeContract.algo.ts:10","pc":[578,579,580]},{"teal":515,"source":"contracts/BadgeContract.algo.ts:10","pc":[581,582]},{"teal":516,"source":"contracts/BadgeContract.algo.ts:10","pc":[583,584]},{"teal":517,"source":"contracts/BadgeContract.algo.ts:10","pc":[585]},{"teal":518,"source":"contracts/BadgeContract.algo.ts:10","pc":[586,587]},{"teal":519,"source":"contracts/BadgeContract.algo.ts:10","pc":[588,589]},{"teal":520,"source":"contracts/BadgeContract.algo.ts:10","pc":[590]},{"teal":521,"source":"contracts/BadgeContract.algo.ts:10","pc":[591]},{"teal":522,"source":"contracts/BadgeContract.algo.ts:10","pc":[592,593]},{"teal":523,"source":"contracts/BadgeContract.algo.ts:10","pc":[594]},{"teal":524,"source":"contracts/BadgeContract.algo.ts:10","pc":[595]},{"teal":525,"source":"contracts/BadgeContract.algo.ts:10","pc":[596]},{"teal":526,"source":"contracts/BadgeContract.algo.ts:10","pc":[597,598,599]},{"teal":527,"source":"contracts/BadgeContract.algo.ts:10","pc":[600,601]},{"teal":528,"source":"contracts/BadgeContract.algo.ts:10","pc":[602,603]},{"teal":529,"source":"contracts/BadgeContract.algo.ts:10","pc":[604]},{"teal":530,"source":"contracts/BadgeContract.algo.ts:10","pc":[605]},{"teal":531,"source":"contracts/BadgeContract.algo.ts:10","pc":[606,607]},{"teal":532,"source":"contracts/BadgeContract.algo.ts:10","pc":[608,609]},{"teal":533,"source":"contracts/BadgeContract.algo.ts:10","pc":[610,611]},{"teal":534,"source":"contracts/BadgeContract.algo.ts:10","pc":[612,613]},{"teal":535,"source":"contracts/BadgeContract.algo.ts:10","pc":[614]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQIAICYIAAcABWZhbHNlAgAMD2Ftb3VudFJlbWFpbmluZw5jcmVhdG9yQWRkcmVzcwlhc3NldE5hbWUIAAAAAAAAAAAHYXNzZXRJRDEYFIEGCzEZCI0MAZ0AAAAAAAAAAAAAAY8AAAAAAAAAAAAAADYaAxc2GgJXAgA2GgFJFSUSRIgAAiJDigMAJwSL/2cnBYv+SRUWVwYCTFBnK4v9Z4k2GgIXNhoBVwIAiAACIkOKAgAoMQA2MgByB0gSRLGBA7IQi/6yIiSyI4AFQkFER0WyJScFZFcCALImi/+yJzIKsiwnBGSyKTIKsiqBuBeyAbO0PIwAJweLAGeJNhoBVwIAiAACIkOKAQAoKCgqKYgBLYv/SRUWVwYCTFCIASAnBogBDkhQjAAxAL1MSBREMQBJvEiLAL+JNhoBSRUlEkSIAAIiQ4oBACgoKCopiADvMQC+RDX/IzT/NP9PAllJNP9MWSILIwhYVwIASRUWVwYCTFCIAMknBogAt0hQjACL/4gAVjEASbxIiwC/iTYaAReIAAIiQ4oBACgoKCopiACeMQC+RDX/IzT/NP9PAllJNP9MWSILIwhYVwIASRUWVwYCTFCIAHiL/xaIAGVIUIwAMQBJvEiLAL+JigEBKLGBBLIQJwdkshGL/7IUIrISJLIBsytkIgmMAIsAjACJgAQMWC4BNhoAjgH+ZQCABLu+m5mABEkfyqeABAgk4iaABE2SWw02GgCOBP5w/sv/B/9cAIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":3,"commitHash":"f3be4a3b"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type UserDetails = {
  approved: string,
  desc: string,
  multiSignAppId: bigint
}


/**
 * Converts the ABI tuple representation of a UserDetails to the struct representation
 */
export function UserDetailsFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserDetails, APP_SPEC.structs) as UserDetails
}

/**
 * The argument types for the BadgeContract contract
 */
export type BadgeContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,string,uint64)void': {
      creatorAddress: string
      tokenName: string
      total: bigint | number
    }
    'createBadge(string,uint64)void': {
      assetUrl: string
      totalTickets: bigint | number
    }
    'registerBadge(string)void': {
      email: string
    }
    'approve(address)void': {
      user: string
    }
    'assignAppID(uint64)void': {
      appId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,string,uint64)void': [creatorAddress: string, tokenName: string, total: bigint | number]
    'createBadge(string,uint64)void': [assetUrl: string, totalTickets: bigint | number]
    'registerBadge(string)void': [email: string]
    'approve(address)void': [user: string]
    'assignAppID(uint64)void': [appId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type BadgeContractReturns = {
  'createApplication(address,string,uint64)void': void
  'createBadge(string,uint64)void': void
  'registerBadge(string)void': void
  'approve(address)void': void
  'assignAppID(uint64)void': void
}

/**
 * Defines the types of available calls and state of the BadgeContract smart contract.
 */
export type BadgeContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,string,uint64)void' | 'createApplication', {
      argsObj: BadgeContractArgs['obj']['createApplication(address,string,uint64)void']
      argsTuple: BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']
      returns: BadgeContractReturns['createApplication(address,string,uint64)void']
    }>
    & Record<'createBadge(string,uint64)void' | 'createBadge', {
      argsObj: BadgeContractArgs['obj']['createBadge(string,uint64)void']
      argsTuple: BadgeContractArgs['tuple']['createBadge(string,uint64)void']
      returns: BadgeContractReturns['createBadge(string,uint64)void']
    }>
    & Record<'registerBadge(string)void' | 'registerBadge', {
      argsObj: BadgeContractArgs['obj']['registerBadge(string)void']
      argsTuple: BadgeContractArgs['tuple']['registerBadge(string)void']
      returns: BadgeContractReturns['registerBadge(string)void']
    }>
    & Record<'approve(address)void' | 'approve', {
      argsObj: BadgeContractArgs['obj']['approve(address)void']
      argsTuple: BadgeContractArgs['tuple']['approve(address)void']
      returns: BadgeContractReturns['approve(address)void']
    }>
    & Record<'assignAppID(uint64)void' | 'assignAppID', {
      argsObj: BadgeContractArgs['obj']['assignAppID(uint64)void']
      argsTuple: BadgeContractArgs['tuple']['assignAppID(uint64)void']
      returns: BadgeContractReturns['assignAppID(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetName: string
        assetId: bigint
        creatorAddress: string
        amountRemaining: bigint
        multiSignAppId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        registeredMap: Map<string, UserDetails>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type BadgeContractSignatures = keyof BadgeContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type BadgeContractNonVoidMethodSignatures = keyof BadgeContractTypes['methods'] extends infer T ? T extends keyof BadgeContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the BadgeContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends BadgeContractSignatures> = BadgeContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BadgeContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BadgeContractSignatures> = BadgeContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = BadgeContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = BadgeContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type BadgeContractCreateCallParams =
  | Expand<CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & {method: 'createApplication(address,string,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type BadgeContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: BadgeContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the BadgeContract smart contract
 */
export abstract class BadgeContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends BadgeContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,string,uint64)void':
            return BadgeContractParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the BadgeContract smart contract using the createApplication(address,string,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,string,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creatorAddress, params.args.tokenName, params.args.total],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createBadge(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createBadge(params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createBadge(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetUrl, params.args.totalTickets],
    }
  }
  /**
   * Constructs a no op call for the registerBadge(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerBadge(params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerBadge(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.email],
    }
  }
  /**
   * Constructs a no op call for the approve(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approve(params: CallParams<BadgeContractArgs['obj']['approve(address)void'] | BadgeContractArgs['tuple']['approve(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approve(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the assignAppID(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignAppId(params: CallParams<BadgeContractArgs['obj']['assignAppID(uint64)void'] | BadgeContractArgs['tuple']['assignAppID(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignAppID(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the BadgeContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class BadgeContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `BadgeContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new BadgeContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new BadgeContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the BadgeContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: BadgeContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? BadgeContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (BadgeContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new BadgeContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeContract smart contract using the createApplication(address,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(BadgeContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeContract smart contract using the createApplication(address,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(BadgeContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the BadgeContract smart contract using an ABI method call using the createApplication(address,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<BadgeContractArgs['obj']['createApplication(address,string,uint64)void'] | BadgeContractArgs['tuple']['createApplication(address,string,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(BadgeContractParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | BadgeContractReturns['createApplication(address,string,uint64)void']) }, appClient: new BadgeContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the BadgeContract smart contract
 */
export class BadgeContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `BadgeContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the BadgeContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `BadgeContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends BadgeContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `BadgeContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<BadgeContractClient> {
    return new BadgeContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `BadgeContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<BadgeContractClient> {
    return new BadgeContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `createBadge(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createBadge: (params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeContractParamsFactory.createBadge(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `registerBadge(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerBadge: (params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeContractParamsFactory.registerBadge(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `approve(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approve: (params: CallParams<BadgeContractArgs['obj']['approve(address)void'] | BadgeContractArgs['tuple']['approve(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeContractParamsFactory.approve(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `assignAppID(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignAppId: (params: CallParams<BadgeContractArgs['obj']['assignAppID(uint64)void'] | BadgeContractArgs['tuple']['assignAppID(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(BadgeContractParamsFactory.assignAppId(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `createBadge(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createBadge: (params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeContractParamsFactory.createBadge(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `registerBadge(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerBadge: (params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeContractParamsFactory.registerBadge(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `approve(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approve: (params: CallParams<BadgeContractArgs['obj']['approve(address)void'] | BadgeContractArgs['tuple']['approve(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeContractParamsFactory.approve(params))
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `assignAppID(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignAppId: (params: CallParams<BadgeContractArgs['obj']['assignAppID(uint64)void'] | BadgeContractArgs['tuple']['assignAppID(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(BadgeContractParamsFactory.assignAppId(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `createBadge(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createBadge: async (params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeContractParamsFactory.createBadge(params))
      return {...result, return: result.return as unknown as (undefined | BadgeContractReturns['createBadge(string,uint64)void'])}
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `registerBadge(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerBadge: async (params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeContractParamsFactory.registerBadge(params))
      return {...result, return: result.return as unknown as (undefined | BadgeContractReturns['registerBadge(string)void'])}
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `approve(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approve: async (params: CallParams<BadgeContractArgs['obj']['approve(address)void'] | BadgeContractArgs['tuple']['approve(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeContractParamsFactory.approve(params))
      return {...result, return: result.return as unknown as (undefined | BadgeContractReturns['approve(address)void'])}
    },

    /**
     * Makes a call to the BadgeContract smart contract using the `assignAppID(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignAppId: async (params: CallParams<BadgeContractArgs['obj']['assignAppID(uint64)void'] | BadgeContractArgs['tuple']['assignAppID(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(BadgeContractParamsFactory.assignAppId(params))
      return {...result, return: result.return as unknown as (undefined | BadgeContractReturns['assignAppID(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new BadgeContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current BadgeContract app
   */
  state = {
    /**
     * Methods to access global state for the current BadgeContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetName: result.assetName,
          assetId: result.assetID,
          creatorAddress: result.creatorAddress,
          amountRemaining: result.amountRemaining,
          multiSignAppId: result.multiSignAppID,
        }
      },
      /**
       * Get the current value of the assetName key in global state
       */
      assetName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("assetName")) as string | undefined },
      /**
       * Get the current value of the assetID key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetID")) as bigint | undefined },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the amountRemaining key in global state
       */
      amountRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amountRemaining")) as bigint | undefined },
      /**
       * Get the current value of the multiSignAppID key in global state
       */
      multiSignAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("multiSignAppID")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current BadgeContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the registeredMap map in box state
       */
      registeredMap: {
        /**
         * Get all current values of the registeredMap map in box state
         */
        getMap: async (): Promise<Map<string, UserDetails>> => { return (await this.appClient.state.box.getMap("registeredMap")) as Map<string, UserDetails> },
        /**
         * Get a current value of the registeredMap map by key from box state
         */
        value: async (key: string): Promise<UserDetails | undefined> => { return await this.appClient.state.box.getMapValue("registeredMap", key) as UserDetails | undefined },
      },
    },
  }

  public newGroup(): BadgeContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createBadge(string,uint64)void method call against the BadgeContract contract
       */
      createBadge(params: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a registerBadge(string)void method call against the BadgeContract contract
       */
      registerBadge(params: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerBadge(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approve(address)void method call against the BadgeContract contract
       */
      approve(params: CallParams<BadgeContractArgs['obj']['approve(address)void'] | BadgeContractArgs['tuple']['approve(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approve(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assignAppID(uint64)void method call against the BadgeContract contract
       */
      assignAppId(params: CallParams<BadgeContractArgs['obj']['assignAppID(uint64)void'] | BadgeContractArgs['tuple']['assignAppID(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignAppId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the BadgeContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as BadgeContractComposer
  }
}
export type BadgeContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createBadge(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBadge(params?: CallParams<BadgeContractArgs['obj']['createBadge(string,uint64)void'] | BadgeContractArgs['tuple']['createBadge(string,uint64)void']>): BadgeContractComposer<[...TReturns, BadgeContractReturns['createBadge(string,uint64)void'] | undefined]>

  /**
   * Calls the registerBadge(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerBadge(params?: CallParams<BadgeContractArgs['obj']['registerBadge(string)void'] | BadgeContractArgs['tuple']['registerBadge(string)void']>): BadgeContractComposer<[...TReturns, BadgeContractReturns['registerBadge(string)void'] | undefined]>

  /**
   * Calls the approve(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approve(params?: CallParams<BadgeContractArgs['obj']['approve(address)void'] | BadgeContractArgs['tuple']['approve(address)void']>): BadgeContractComposer<[...TReturns, BadgeContractReturns['approve(address)void'] | undefined]>

  /**
   * Calls the assignAppID(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignAppId(params?: CallParams<BadgeContractArgs['obj']['assignAppID(uint64)void'] | BadgeContractArgs['tuple']['assignAppID(uint64)void']>): BadgeContractComposer<[...TReturns, BadgeContractReturns['assignAppID(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the BadgeContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): BadgeContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): BadgeContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<BadgeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<BadgeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<BadgeContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<BadgeContractComposerResults<TReturns>>
}
export type BadgeContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

